AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  AWS CloudFormation TorchServe: Creates a TorchServe stack using
  an EC2 autoscaling group running Ubuntu 18.04, installss the packages
  and files necessary to deploy.
  **WARNING** This template creates an Amazon EC2 instance. You will be billed for
  the AWS resources used if you create a stack from this template.AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  ServerCertPassword:
    Description: Server certifiate password
    Type: String
    Default: changeit
  InstanceType:
    Description: TorchServe EC2 instance type
    Type: String
    Default: c5.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  ManagementLocation:
    Description: 'The IP address range that can call management endpoint of TorchServe'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: '0.0.0.0/0'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  SSHLocation:
    Description: 'The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: '0.0.0.0/0'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    ConstraintDescription: must be a list of at least two existing subnets associated
      with at least two different availability zones. They should be residing in the
      selected Virtual Private Cloud.
Mappings:
  AWSRegion2AMI:
    us-east-1:
      AMI: ami-085925f297f89fce1
    us-west-2:
      AMI: ami-003634241a8fcdec0
    eu-west-1:
      AMI: ami-0dad359ff462124ca
    us-east-2:
      AMI: ami-07c1207a9d40bc3bd
    ap-southeast-2:
      AMI: ami-04fcc97b5f6edcd89
    ap-northeast-1:
      AMI: ami-0278fe6949f6b1a06
    ap-northeast-2:
      AMI: ami-00edfb46b107f643c
    ap-south-1:
      AMI: ami-0b44050b2d893d5f7
    eu-central-1:
      AMI: ami-0e342d72b12109f91
    ap-southeast-1:
      AMI: ami-0f7719e8b7ba25c61
    us-west-1:
      AMI: ami-0f56279347d2fa43e
Resources:
  TorchServeASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'Subnets'
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: '3'
      MaxSize: '5'
      TargetGroupARNs:
        - !Ref 'ALBTargetGroupInference'
        - !Ref 'ALBTargetGroupManagement'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: '1'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT30M
        WaitOnResourceSignals: 'true'
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
            - TorchServeSetup
            - CloudwatchSetup
            - CFNSetup
        TorchServeSetup:
          files:
            /etc/torchserve/config.properties:
               content: !Sub |
                 inference_address=https://0.0.0.0:8080
                 management_address=https://0.0.0.0:8081
                 private_key_file=/etc/torchserve/server.key
                 certificate_file=/etc/torchserve/server.pem
               mode: '000400'
               owner: root
               group: root
        CloudwatchSetup:
          files:
            # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-Configuration-File-Details.html
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "metrics": {
                    "append_dimensions": {
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      }
                    }
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/var/log/torchserve/ts_log.log",
                            "log_group_name": "${AWS::StackName}/{instance_id}/TorchServe",
                            "log_stream_name": "ApplicationLogs",
                            "timezone": "UTC"
                          },
                          {
                            "file_path": "/var/log/torchserve/ts_metrics.log",
                            "log_group_name": "${AWS::StackName}/{instance_id}/TorchServe",
                            "log_stream_name": "TorchServeMetrics",
                            "timezone": "UTC"
                          },
                          {
                            "file_path": "/var/log/torchserve/access_log.log",
                            "log_group_name": "${AWS::StackName}/{instance_id}/TorchServe",
                            "log_stream_name": "AccessLogs",
                            "timezone": "UTC"
                          },
                          {
                            "file_path": "/var/log/torchserve/model_log.log",
                            "log_group_name": "${AWS::StackName}/{instance_id}/TorchServe",
                            "log_stream_name": "ModelLogs",
                            "timezone": "UTC"
                          },
                          {
                            "file_path": "/var/log/torchserve/model_metrics.log",
                            "log_group_name": "${AWS::StackName}/{instance_id}/TorchServe",
                            "log_stream_name": "TorchServeModelMetrics",
                            "timezone": "UTC"
                          }
                        ]
                      }
                    }
                  }
                }
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        CFNSetup:
          files:
            /etc/cfn/cfn-hup.conf:
               content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
               mode: '000400'
               owner: root
               group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
               content: !Sub |
                 [cfn-auto-reloader-hook]
                 triggers=post.update
                 path=Resources.TorchServeASG.Metadata.AWS::CloudFormation::Init
                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource TorchServeASG --region ${AWS::Region} --configsets InstallAndRun
                 runas=root
               mode: '000400'
               owner: root
               group: root
            /lib/systemd/system/cfn-hup.service:
                content: !Sub |
                  [Unit]
                  Description=cfn-hup daemon
                  [Service]
                  Type=simple
                  ExecStart=/opt/aws/bin/cfn-hup
                  Restart=always
                  [Install]
                  WantedBy=multi-user.target
          commands:
            01_enable_cfn_hup:
              command: !Sub |
                systemctl enable cfn-hup.service
            02_start_cfn_hup:
              command: !Sub |
                systemctl start cfn-hup.service
    Properties:
      KeyName: !Ref 'KeyName'
      ImageId: !FindInMap
        - AWSRegion2AMI
        - !Ref 'AWS::Region'
        - AMI
      SecurityGroups:
        - !Ref 'InstanceSecurityGroup'
      InstanceType: !Ref 'InstanceType'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb
          dpkg -i /tmp/amazon-cloudwatch-agent.deb
          apt-get update -y
          apt-get install -y python-pip python-setuptools openjdk-11-jdk openssl
          python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          # Install miniconda https://docs.anaconda.com/anaconda/install/silent-mode/
          wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh
          rm -rf /home/ubuntu/miniconda && bash /tmp/miniconda.sh -b -p /home/ubuntu/miniconda
          export PATH="/home/ubuntu/miniconda/bin:$PATH"
          conda init
          source /home/ubuntu/miniconda/etc/profile.d/conda.sh
          conda config --set always_yes yes
          conda create --name torchserve torchserve torch-model-archiver psutil future pytorch torchtext torchvision cudatoolkit=10.1 -c pytorch -c powerai
          conda activate torchserve
          # Setup private-key file and self-signed certificate files
          mkdir /etc/torchserve/
          openssl req -new -x509 -days 365 -nodes -out /etc/torchserve/server.pem -keyout /etc/torchserve/server.key -subj "/C=US/ST=Washington/L=Seattle/O=Amazon Web Services/OU=Torchserve"
          keytool -import -alias torchserve -keystore /etc/torchserve/keystore -trustcacerts -file /etc/torchserve/server.pem -storepass ${ServerCertPassword} -noprompt
          # Start cfn-hup
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LaunchConfig --region ${AWS::Region} --configsets InstallAndRun
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource TorchServeASG --region ${AWS::Region}
          # Start torchserve
          mkdir model_store
          export LOG_LOCATION="/var/log/torchserve"
          torchserve --start --model-store ./model_store --ts-config /etc/torchserve/config.properties
  TorchServeScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'TorchServeASG'
      Cooldown: '60'
      ScalingAdjustment: '1'
  TorchServeScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'TorchServeASG'
      Cooldown: '60'
      ScalingAdjustment: '-1'
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '90'
      AlarmActions:
        - !Ref 'TorchServeScaleUpPolicy'
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref 'TorchServeASG'
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '70'
      AlarmActions:
        - !Ref 'TorchServeScaleDownPolicy'
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref 'TorchServeASG'
      ComparisonOperator: LessThanThreshold
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref 'Subnets'
  ALBManagementListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'ALBTargetGroupManagement'
      LoadBalancerArn: !Ref 'ApplicationLoadBalancer'
      Port: '8080'
      Protocol: HTTP
  ALBInferenceListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'ALBTargetGroupInference'
      LoadBalancerArn: !Ref 'ApplicationLoadBalancer'
      Port: '8081'
      Protocol: HTTP
  ALBTargetGroupManagement:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      HealthCheckPath: /ping
      HealthCheckProtocol: HTTP
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref 'VpcId'
  ALBTargetGroupInference:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      HealthCheckPort: 8080
      HealthCheckPath: /ping
      HealthCheckProtocol: HTTP
      Port: 8081
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref 'VpcId'
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP from the load balancer only
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          SourceSecurityGroupId: !Select
            - 0
            - !GetAtt 'ApplicationLoadBalancer.SecurityGroups'
        - IpProtocol: tcp
          FromPort: '8081'
          ToPort: '8081'
          SourceSecurityGroupId: !Select
            - 0
            - !GetAtt 'ApplicationLoadBalancer.SecurityGroups'
      VpcId: !Ref 'VpcId'
Outputs:
  TorchServeManagementURL:
    Description: Management URL for newly created TorchServe stack
    Value: !Join
      - ''
      - - https://
        - !GetAtt 'ApplicationLoadBalancer.DNSName'
        - :8081
  TorchServeInferenceURL:
    Description: Inference URL for newly created TorchServe stack
    Value: !Join
      - ''
      - - https://
        - !GetAtt 'ApplicationLoadBalancer.DNSName'
        - :8080
