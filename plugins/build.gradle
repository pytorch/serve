/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4.1/userguide/java_library_plugin.html
 */

buildscript {
    ext {
        spotbugsVersion = '4.0.2'
        toolVersion = '4.0.2'
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    version = '1.0'

    repositories {
        mavenLocal()
        jcenter()
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    idea {
        module {
            outputDir = file('build/classes/java/main')
            testOutputDir = file('build/classes/java/test')
        }
    }

    task buildSagemaker("type": Jar) {

        doFirst{ task ->
            println "building $task.project.name"
        }

        with project.jar

        doLast {
            copy {
                def fromDir = project.jar
                def intoDir = "${rootProject.projectDir}/build/plugins"
                from fromDir
                into intoDir
                println "Copying files from" + fromDir + " into " + intoDir
            }
        }
    }

    buildSagemaker.onlyIf {project.hasProperty("sagemaker")}

}

def javaProjects() {
    return subprojects.findAll()
}

configure(javaProjects()) {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    defaultTasks 'jar'

    apply from: file("${rootProject.projectDir}/tools/gradle/spotbugs.gradle")
    apply from: file("${rootProject.projectDir}/tools/gradle/formatter.gradle")
    apply from: file("${rootProject.projectDir}/tools/gradle/check.gradle")

    test {
        useTestNG() {
            // suiteXmlFiles << new File(rootDir, "testng.xml") //This is how to add custom testng.xml
        }

        testLogging {
            showStandardStreams = true
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
    }

    test.finalizedBy(project.tasks.jacocoTestReport)

    compileJava {
        options.compilerArgs << "-Xlint:all,-options,-static" << "-Werror"
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.75
                }
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "org.pytorch"
            artifactId = "torchserve-endpoint-plugin"
            version = '0.0.1'
            from components.java

            pom {
                name = 'torchserve-endpoint-plugin'
                description = 'SDK for PyTorch model server endpoint plugins'
                url = 'https://github.com/pytorch/serve'

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'PyTorch Model Server'
                        url = 'https://github.com/pytorch/serve'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/pytorch/serve.git'
                    developerConnection = 'scm:git:ssh://github.com:pytorch/serve.git'
                    url = 'https://github.com/pytorch/serve'
                }
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = ${gpg.keyname}
                password = ${gpg.passphrase}
            }
        }
    }
}
