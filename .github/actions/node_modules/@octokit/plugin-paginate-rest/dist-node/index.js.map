{"version":3,"file":"index.js","sources":["../dist-src/version.js","../dist-src/normalize-paginated-list-response.js","../dist-src/iterator.js","../dist-src/paginate.js","../dist-src/index.js"],"sourcesContent":["export const VERSION = \"1.1.2\";\n","/**\n * Some “list” response that can be paginated have a different response structure\n *\n * They have a `total_count` key in the response (search also has `incomplete_results`,\n * /installation/repositories also has `repository_selection`), as well as a key with\n * the list of the items which name varies from endpoint to endpoint:\n *\n * - https://developer.github.com/v3/search/#example (key `items`)\n * - https://developer.github.com/v3/checks/runs/#response-3 (key: `check_runs`)\n * - https://developer.github.com/v3/checks/suites/#response-1 (key: `check_suites`)\n * - https://developer.github.com/v3/apps/installations/#list-repositories (key: `repositories`)\n * - https://developer.github.com/v3/apps/installations/#list-installations-for-a-user (key `installations`)\n *\n * Octokit normalizes these responses so that paginated results are always returned following\n * the same structure. One challenge is that if the list response has only one page, no Link\n * header is provided, so this header alone is not sufficient to check wether a response is\n * paginated or not. For the exceptions with the namespace, a fallback check for the route\n * paths has to be added in order to normalize the response. We cannot check for the total_count\n * property because it also exists in the response of Get the combined status for a specific ref.\n */\nconst REGEX = [\n    /^\\/search\\//,\n    /^\\/repos\\/[^/]+\\/[^/]+\\/commits\\/[^/]+\\/(check-runs|check-suites)([^/]|$)/,\n    /^\\/installation\\/repositories([^/]|$)/,\n    /^\\/user\\/installations([^/]|$)/,\n    /^\\/repos\\/[^/]+\\/[^/]+\\/actions\\/secrets([^/]|$)/,\n    /^\\/repos\\/[^/]+\\/[^/]+\\/actions\\/workflows(\\/[^/]+\\/runs)?([^/]|$)/,\n    /^\\/repos\\/[^/]+\\/[^/]+\\/actions\\/runs(\\/[^/]+\\/(artifacts|jobs))?([^/]|$)/\n];\nexport function normalizePaginatedListResponse(octokit, url, response) {\n    const path = url.replace(octokit.request.endpoint.DEFAULTS.baseUrl, \"\");\n    const responseNeedsNormalization = REGEX.find(regex => regex.test(path));\n    if (!responseNeedsNormalization)\n        return;\n    // keep the additional properties intact as there is currently no other way\n    // to retrieve the same information.\n    const incompleteResults = response.data.incomplete_results;\n    const repositorySelection = response.data.repository_selection;\n    const totalCount = response.data.total_count;\n    delete response.data.incomplete_results;\n    delete response.data.repository_selection;\n    delete response.data.total_count;\n    const namespaceKey = Object.keys(response.data)[0];\n    const data = response.data[namespaceKey];\n    response.data = data;\n    if (typeof incompleteResults !== \"undefined\") {\n        response.data.incomplete_results = incompleteResults;\n    }\n    if (typeof repositorySelection !== \"undefined\") {\n        response.data.repository_selection = repositorySelection;\n    }\n    response.data.total_count = totalCount;\n    Object.defineProperty(response.data, namespaceKey, {\n        get() {\n            octokit.log.warn(`[@octokit/paginate-rest] \"response.data.${namespaceKey}\" is deprecated for \"GET ${path}\". Get the results directly from \"response.data\"`);\n            return Array.from(data);\n        }\n    });\n}\n","import { normalizePaginatedListResponse } from \"./normalize-paginated-list-response\";\nexport function iterator(octokit, route, parameters) {\n    const options = octokit.request.endpoint(route, parameters);\n    const method = options.method;\n    const headers = options.headers;\n    let url = options.url;\n    return {\n        [Symbol.asyncIterator]: () => ({\n            next() {\n                if (!url) {\n                    return Promise.resolve({ done: true });\n                }\n                return octokit\n                    .request({ method, url, headers })\n                    .then((response) => {\n                    normalizePaginatedListResponse(octokit, url, response);\n                    // `response.headers.link` format:\n                    // '<https://api.github.com/users/aseemk/followers?page=2>; rel=\"next\", <https://api.github.com/users/aseemk/followers?page=2>; rel=\"last\"'\n                    // sets `url` to undefined if \"next\" URL is not present or `link` header is not set\n                    url = ((response.headers.link || \"\").match(/<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n                    return { value: response };\n                });\n            }\n        })\n    };\n}\n","import { iterator } from \"./iterator\";\nexport function paginate(octokit, route, parameters, mapFn) {\n    if (typeof parameters === \"function\") {\n        mapFn = parameters;\n        parameters = undefined;\n    }\n    return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);\n}\nfunction gather(octokit, results, iterator, mapFn) {\n    return iterator.next().then(result => {\n        if (result.done) {\n            return results;\n        }\n        let earlyExit = false;\n        function done() {\n            earlyExit = true;\n        }\n        results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);\n        if (earlyExit) {\n            return results;\n        }\n        return gather(octokit, results, iterator, mapFn);\n    });\n}\n","import { VERSION } from \"./version\";\nimport { paginate } from \"./paginate\";\nimport { iterator } from \"./iterator\";\n/**\n * @param octokit Octokit instance\n * @param options Options passed to Octokit constructor\n */\nexport function paginateRest(octokit) {\n    return {\n        paginate: Object.assign(paginate.bind(null, octokit), {\n            iterator: iterator.bind(null, octokit)\n        })\n    };\n}\npaginateRest.VERSION = VERSION;\n"],"names":["VERSION","REGEX","normalizePaginatedListResponse","octokit","url","response","path","replace","request","endpoint","DEFAULTS","baseUrl","responseNeedsNormalization","find","regex","test","incompleteResults","data","incomplete_results","repositorySelection","repository_selection","totalCount","total_count","namespaceKey","Object","keys","defineProperty","get","log","warn","Array","from","iterator","route","parameters","options","method","headers","Symbol","asyncIterator","next","Promise","resolve","done","then","link","match","value","paginate","mapFn","undefined","gather","results","result","earlyExit","concat","paginateRest","assign","bind"],"mappings":"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"}