name: Testing official Release
#name: Make an official Release

#on: workflow_dispatch
on: push

jobs:
  #official-release:
  test-official-release:
    runs-on: [self-hosted, regression-test-gpu]
    # The official-release environment requires 2 manual approvals
    #environment:
    #  name: official-release
    steps:
      - name: Clean up previous run
        run: |
          echo "Cleaning up previous run"
          ls -la ./
          sudo rm -rf ./* || true
          sudo rm -rf ./.??* || true
          ls -la ./
      - name: Setup Java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Checkout TorchServe
        uses: actions/checkout@v3
      - name: Setup Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: "3.8"
          architecture: x64
      - run: python -V
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
          python-version: "3.8"
      #- name: Setup Conda
      #  uses: s-weigand/setup-conda@v1
      #  with:
      #    python-version: "3.10"
      - run: conda update --name base conda
      - name: Setup Anaconda
        run: |
          conda --version
          conda install -y conda-build anaconda-client
      - run: conda -h
      - run: conda build -V
      - name: Install dependencies
        run: |
          python ts_scripts/install_dependencies.py --environment=dev
          pip install -e .
      - name: Setup Anaconda
        run: |
          conda --version
          conda install -y conda-build anaconda-client
      - run: which conda
      - run: conda build -V
      - run: python -V
      - name: Build PyPI & conda binaries
        run: python binaries/build.py
      - run: conda build -V
      #- name: Push conda binaries
      #  env:
      #    ANACONDA_API_TOKEN: ${{ secrets.CONDA_PASSWORD }}
      #  run: python binaries/upload.py --upload-conda-packages
      #- name: Push PyPI binaries
      #  env:
      #    TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      #  run: python binaries/upload.py --upload-pypi-packages
      #- name: Login to Docker
      #  env:
      #    DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
      #  run: docker login --username pytorchbot --password "$DOCKER_PASSWORD"
      #- name: Build & Upload pytorch/torchserve Docker images
      #  run: |
      #    cd docker
      #    python build_upload_release.py --cleanup
      #    cd ..
      #- name: Build & Upload pytorch/torchserve-kfs Docker images
      #  run: |
      #    cd kubernetes/kserve
      #    python build_upload_release.py --cleanup
      #    cd ..
