{
  "openapi": "3.0.1",
  "info": {
    "title": "RESTful Management API for: noop",
    "version": "%s"
  },
  "paths": {
    "/models/{model_name}": {
      "get": {
        "description": "Provides detailed information about the default version of a model.",
        "operationId": "describeModel",
        "parameters": [
          {
            "in": "path",
            "name": "model_name",
            "description": "Name of model to describe.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "modelName",
                    "modelVersion",
                    "modelUrl",
                    "minWorkers",
                    "maxWorkers",
                    "status",
                    "workers",
                    "metrics"
                  ],
                  "properties": {
                    "modelName": {
                      "type": "string",
                      "description": "Name of the model."
                    },
                    "modelVersion": {
                      "type": "string",
                      "description": "Version of the model."
                    },
                    "modelUrl": {
                      "type": "string",
                      "description": "URL of the model."
                    },
                    "minWorkers": {
                      "type": "integer",
                      "description": "Configured minimum number of worker."
                    },
                    "maxWorkers": {
                      "type": "integer",
                      "description": "Configured maximum number of worker."
                    },
                    "batchSize": {
                      "type": "integer",
                      "description": "Configured batch size."
                    },
                    "maxBatchDelay": {
                      "type": "integer",
                      "description": "Configured maximum batch delay in ms."
                    },
                    "status": {
                      "type": "string",
                      "description": "Overall health status of the model"
                    },
                    "workers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "startTime",
                          "status"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Worker id"
                          },
                          "startTime": {
                            "type": "string",
                            "description": "Worker start time"
                          },
                          "gpu": {
                            "type": "boolean",
                            "description": "If running on GPU"
                          },
                          "status": {
                            "type": "string",
                            "description": "Worker status",
                            "enum": [
                              "READY",
                              "LOADING",
                              "UNLOADING"
                            ]
                          }
                        }
                      },
                      "description": "A list of active backend workers."
                    },
                    "metrics": {
                      "type": "object",
                      "required": [
                        "rejectedRequests",
                        "waitingQueueSize",
                        "requests"
                      ],
                      "properties": {
                        "rejectedRequests": {
                          "type": "integer",
                          "description": "Number requests has been rejected in last 10 minutes."
                        },
                        "waitingQueueSize": {
                          "type": "integer",
                          "description": "Number requests waiting in the queue."
                        },
                        "requests": {
                          "type": "integer",
                          "description": "Number requests processed in last 10 minutes."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Model not found or Model version not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code."
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code."
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Configure number of workers for a default version of a model.This is a asynchronous call by default. Caller need to call describeModel to check if the model workers has been changed.",
        "operationId": "setAutoScale",
        "parameters": [
          {
            "in": "path",
            "name": "model_name",
            "description": "Name of model to scale workers.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "min_worker",
            "description": "Minimum number of worker processes.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "1"
            }
          },
          {
            "in": "query",
            "name": "max_worker",
            "description": "Maximum number of worker processes.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "1"
            }
          },
          {
            "in": "query",
            "name": "number_gpu",
            "description": "Number of GPU worker processes to create.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "0"
            }
          },
          {
            "in": "query",
            "name": "synchronous",
            "description": "Decides whether the call is synchronous or not, default: false.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "false"
            }
          },
          {
            "in": "query",
            "name": "timeout",
            "description": "Waiting up to the specified wait time if necessary for a worker to complete all pending requests. Use 0 to terminate backend worker process immediately. Use -1 for wait infinitely.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Model workers updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error type."
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error type."
                    }
                  }
                }
              }
            }
          },
          "210": {
            "description": "Partial Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error type."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code."
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Model not found or Model version not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code."
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code."
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Unregister the default version of a model from TorchServe if it is the only version available.This is a asynchronous call by default. Caller can call listModels to confirm model is unregistered",
        "operationId": "unregisterModel",
        "parameters": [
          {
            "in": "path",
            "name": "model_name",
            "description": "Name of model to unregister.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "synchronous",
            "description": "Decides whether the call is synchronous or not, default: false.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "false"
            }
          },
          {
            "in": "query",
            "name": "timeout",
            "description": "Waiting up to the specified wait time if necessary for a worker to complete all pending requests. Use 0 to terminate backend worker process immediately. Use -1 for wait infinitely.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Model unregistered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error type."
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error type."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Model not found or Model version not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code."
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code."
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code."
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/models/{model_name}/{model_version}": {
      "get": {
        "description": "Provides detailed information about the specified version of a model.If \"all\" is specified as version, returns the details about all the versions of the model.",
        "operationId": "version_describeModel",
        "parameters": [
          {
            "in": "path",
            "name": "model_name",
            "description": "Name of model to describe.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "model_version",
            "description": "Version of model to describe.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "modelName",
                    "modelVersion",
                    "modelUrl",
                    "minWorkers",
                    "maxWorkers",
                    "status",
                    "workers",
                    "metrics"
                  ],
                  "properties": {
                    "modelName": {
                      "type": "string",
                      "description": "Name of the model."
                    },
                    "modelVersion": {
                      "type": "string",
                      "description": "Version of the model."
                    },
                    "modelUrl": {
                      "type": "string",
                      "description": "URL of the model."
                    },
                    "minWorkers": {
                      "type": "integer",
                      "description": "Configured minimum number of worker."
                    },
                    "maxWorkers": {
                      "type": "integer",
                      "description": "Configured maximum number of worker."
                    },
                    "batchSize": {
                      "type": "integer",
                      "description": "Configured batch size."
                    },
                    "maxBatchDelay": {
                      "type": "integer",
                      "description": "Configured maximum batch delay in ms."
                    },
                    "status": {
                      "type": "string",
                      "description": "Overall health status of the model"
                    },
                    "workers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "startTime",
                          "status"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Worker id"
                          },
                          "startTime": {
                            "type": "string",
                            "description": "Worker start time"
                          },
                          "gpu": {
                            "type": "boolean",
                            "description": "If running on GPU"
                          },
                          "status": {
                            "type": "string",
                            "description": "Worker status",
                            "enum": [
                              "READY",
                              "LOADING",
                              "UNLOADING"
                            ]
                          }
                        }
                      },
                      "description": "A list of active backend workers."
                    },
                    "metrics": {
                      "type": "object",
                      "required": [
                        "rejectedRequests",
                        "waitingQueueSize",
                        "requests"
                      ],
                      "properties": {
                        "rejectedRequests": {
                          "type": "integer",
                          "description": "Number requests has been rejected in last 10 minutes."
                        },
                        "waitingQueueSize": {
                          "type": "integer",
                          "description": "Number requests waiting in the queue."
                        },
                        "requests": {
                          "type": "integer",
                          "description": "Number requests processed in last 10 minutes."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Model not found or Model version not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code."
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code."
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Configure number of workers for a specified version of a model. This is a asynchronous call by default. Caller need to call describeModel to check if the model workers has been changed.",
        "operationId": "version_setAutoScale",
        "parameters": [
          {
            "in": "path",
            "name": "model_name",
            "description": "Name of model to scale workers.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "model_version",
            "description": "Version of model to scale workers.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "min_worker",
            "description": "Minimum number of worker processes.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "1"
            }
          },
          {
            "in": "query",
            "name": "max_worker",
            "description": "Maximum number of worker processes.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "1"
            }
          },
          {
            "in": "query",
            "name": "number_gpu",
            "description": "Number of GPU worker processes to create.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "0"
            }
          },
          {
            "in": "query",
            "name": "synchronous",
            "description": "Decides whether the call is synchronous or not, default: false.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "false"
            }
          },
          {
            "in": "query",
            "name": "timeout",
            "description": "Waiting up to the specified wait time if necessary for a worker to complete all pending requests. Use 0 to terminate backend worker process immediately. Use -1 for wait infinitely.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Model workers updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error type."
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error type."
                    }
                  }
                }
              }
            }
          },
          "210": {
            "description": "Partial Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error type."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code."
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Model not found or Model version not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code."
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code."
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Unregister the specified version of a model from TorchServe. This is an asynchronous call by default. Caller can call listModels to confirm model is unregistered",
        "operationId": "version_unregisterModel",
        "parameters": [
          {
            "in": "path",
            "name": "model_name",
            "description": "Name of model to unregister.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "model_version",
            "description": "Version of model to unregister.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "synchronous",
            "description": "Decides whether the call is synchronous or not, default: false.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "false"
            }
          },
          {
            "in": "query",
            "name": "timeout",
            "description": "Waiting up to the specified wait time if necessary for a worker to complete all pending requests. Use 0 to terminate backend worker process immediately. Use -1 for wait infinitely.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "-1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Model unregistered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error type."
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error type."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Model not found or Model version not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code."
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code."
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code."
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/models/{model_name}/{model_version}/set-default": {
      "put": {
        "description": "Set default version of a model",
        "operationId": "setDefault",
        "parameters": [
          {
            "in": "path",
            "name": "model_name",
            "description": "Name of model whose default version needs to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "model_version",
            "description": "Version of model to be set as default version for the model",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Default vesion succsesfully updated for model",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error type."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Model not found or Model version not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code."
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "type",
                    "message"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Error code."
                    },
                    "type": {
                      "type": "string",
                      "description": "Error type."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
