{
	"info": {
		"_postman_id": "f9c53eec-120c-405e-bbdb-7c671346ceb1",
		"name": "torchserve_regression_management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ddf59ae0-0ff7-4d21-97e0-bd4b0ba44085",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar&model_name=squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar"
						},
						{
							"key": "model_name",
							"value": "squeezenet1_1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model Mnist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "958601e0-24d3-48b7-9202-2b55bcde3bcb",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/mnist.mar&model_name=mnist",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/mnist.mar"
						},
						{
							"key": "model_name",
							"value": "mnist"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model Densenet161",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c5218461-cb8e-487a-98ba-330d7667de98",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/densenet161.mar&model_name=densenet161",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/densenet161.mar"
						},
						{
							"key": "model_name",
							"value": "densenet161"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Model Re-Registration Densenet161",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "890bf2a4-a3de-4483-a4d8-686039fa8875",
						"exec": [
							"pm.test(",
							"    \"Invalid RegisterModel request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([500]);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "775f8303-e953-4b36-b809-326bbe8269cb",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/densenet161.mar&model_name=densenet161",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/densenet161.mar"
						},
						{
							"key": "model_name",
							"value": "densenet161"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model Densenet161",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "658b2dc8-7ff2-44cd-8153-67086d45f95f",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/densenet161",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"densenet161"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model missing url",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f09834d1-22a4-4808-bdc6-8f16b64ad42c",
						"exec": [
							"pm.test(",
							"    \"Invalid RegisterModel request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Existing Mnist Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e2977130-b65d-4c36-878b-65fa9959950d",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/mnist",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"mnist"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Mnist Model with Invalid Handler",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "41c5dc07-3bfa-4bec-a09b-c0b3810173fd",
						"exec": [
							"// pm.test(",
							"//     \"Invalid RegisterModel request \\t\" +",
							"//     \"Exception code : \" + pm.response.code + \"\\t\" +",
							"//     \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"//     \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"//     function () {",
							"//     pm.expect(pm.response.code).to.be.oneOf([400]);",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/mnist.mar&model_name=mnist&handler=invalidHandler",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/mnist.mar"
						},
						{
							"key": "model_name",
							"value": "mnist"
						},
						{
							"key": "handler",
							"value": "invalidHandler"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model mnist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2fd7be3d-018f-4ddd-b8c7-e87f47ca10b4",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/mnist",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"mnist"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Mnist Model with Invalid Handler",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bf2167ca-b48a-41cc-8ab3-5e0d8c42f85d",
						"exec": [
							"// pm.test(",
							"//     \"Invalid RegisterModel request \\t\" +",
							"//     \"Exception code : \" + pm.response.code + \"\\t\" +",
							"//     \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"//     \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"//     function () {",
							"//     pm.expect(pm.response.code).to.be.oneOf([400]);",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/mnist.mar&model_name=mnist&handler=invalidHandler",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/mnist.mar"
						},
						{
							"key": "model_name",
							"value": "mnist"
						},
						{
							"key": "handler",
							"value": "invalidHandler"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale Invalid Mnist Handler Model with Min Workers - Synchronous",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "11b0aeef-653d-4555-8bc3-2e527c86b3e4",
						"exec": [
							"pm.test(",
							"    \"Invalid Scale Workers request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([500]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/mnist?min_worker=4&synchronous=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"mnist"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "4"
						},
						{
							"key": "synchronous",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model mnist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "54373768-0ecb-4e3c-a323-83904f1587bc",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/mnist",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"mnist"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Model - All Versions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2a90a802-f5c2-4883-a6b0-396549a54b56",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/all",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Mnist Model with Invalid Handler",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "efdda61c-1bdf-4467-812b-d88cf91ece83",
						"exec": [
							"// pm.test(",
							"//     \"Invalid RegisterModel request \\t\" +",
							"//     \"Exception code : \" + pm.response.code + \"\\t\" +",
							"//     \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"//     \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"//     function () {",
							"//     pm.expect(pm.response.code).to.be.oneOf([400]);",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/mnist.mar&model_name=mnist&handler=invalidHandler",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/mnist.mar"
						},
						{
							"key": "model_name",
							"value": "mnist"
						},
						{
							"key": "handler",
							"value": "invalidHandler"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale Invalid Handler Model with Min Workers - Synchronous",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c417d4c6-590f-49ec-9f6f-4cbede72c3da",
						"exec": [
							"pm.test(",
							"    \"Invalid Scale Workers request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([500]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/mnist?min_worker=4&synchronous=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"mnist"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "4"
						},
						{
							"key": "synchronous",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Repeat Scaling Invalid Handler Model with Min Workers - Synchronous",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dcdfe294-5cc0-42e5-98e0-55748d6bf789",
						"exec": [
							"// pm.test(",
							"//     \"Invalid Scale Workers request \\t\" +",
							"//     \"Exception code : \" + pm.response.code + \"\\t\" +",
							"//     \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"//     \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"//     function () {",
							"//     pm.expect(pm.response.code).to.be.oneOf([500]);",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/mnist?min_worker=4&synchronous=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"mnist"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "4"
						},
						{
							"key": "synchronous",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model mnist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d3a888c7-761c-4d18-b5e5-1f2988ae16db",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/mnist",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"mnist"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Model with Version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "43c488a0-ff37-4b26-a2d4-85b2616899a1",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/1.0",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						"1.0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Valid Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2d92bf77-399c-42c3-8743-470f8ce2f6d4",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1"
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bfc9e9cd-ca78-4d3d-9057-3cd20cf39f77",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model invalid Runtime",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "83adf355-7d60-4a52-93b2-3ee007203d7c",
						"exec": [
							"pm.test(",
							"    \"Invalid RegisterModel request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar&model_name=squeezenet1_1&runtime=python4",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar"
						},
						{
							"key": "model_name",
							"value": "squeezenet1_1"
						},
						{
							"key": "runtime",
							"value": "python4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List Models",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9daf6256-0bc3-452c-b774-560397a200f2",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?limit=&next_page_token=",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "limit",
							"value": ""
						},
						{
							"key": "next_page_token",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fe3ec37f-f131-4fee-b8d9-85e1b75a15a5",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar&model_name=squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar"
						},
						{
							"key": "model_name",
							"value": "squeezenet1_1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale Min Workers - Asynchronous",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b07c888a-8034-40a5-8db6-b11309ec5a6c",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1?min_worker=3",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale Min Workers - Synchronous",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "65b55e40-3253-4731-b215-1418959496fe",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1?min_worker=4&synchronous=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "4"
						},
						{
							"key": "synchronous",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale Min Workers for a Version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6b826f90-9f86-4bb6-b060-4f9a510b7e65",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/1.0?min_worker=5&synchronous=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						"1.0"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "5"
						},
						{
							"key": "synchronous",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale Min Workers for a Valid model but Invalid Version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ee17c5a4-aad0-44da-817f-c4687103ca04",
						"exec": [
							"pm.test(",
							"    \"Invalid Scale Workers request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/0.0?min_worker=5&synchronous=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						"0.0"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "5"
						},
						{
							"key": "synchronous",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale Min Workers with GPU",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c84d501f-fa75-4484-9486-acfa577db505",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1?min_worker=6&number_gpu=1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "6"
						},
						{
							"key": "number_gpu",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Set Default Model Version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3af45c09-46f5-4865-8895-0aca5a41afc2",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/1.0/set-default",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						"1.0",
						"set-default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set Default Valid Model Invalid Version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d66d6486-d3e2-4270-9351-79a349ba52a8",
						"exec": [
							"pm.test(",
							"    \"Invalid Set Default Version request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/0.0/set-default",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						"0.0",
						"set-default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set Default Invalid Model valid Version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b9677d60-3abd-4254-bb91-2ce8a088d0f6",
						"exec": [
							"pm.test(",
							"    \"Invalid Set Default Version request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet0_1/1.0/set-default",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet0_1",
						"1.0",
						"set-default"
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "48da6a17-32c0-410e-8c62-d7c3253f7ff4",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model with Additional Params",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9e1caf32-37fe-44c6-88d3-f13a13151379",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar&model_name=squeezenet1_1&handler=serve/ts/torch_handler/image_classifier.py:handle",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar"
						},
						{
							"key": "model_name",
							"value": "squeezenet1_1"
						},
						{
							"key": "handler",
							"value": "serve/ts/torch_handler/image_classifier.py:handle"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ec41e9f5-5acf-4cd5-b00d-15e40e2f2d56",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model with Additional Params and response_timeout as 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9967ecf1-ca0a-4085-865f-d76404a685ee",
						"exec": [
							"pm.test(",
							"    \"Invalid RegisterModel request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([500]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar&model_name=squeezenet1_1&batch_size=3&initial_workers=3&response_timeout=0",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar"
						},
						{
							"key": "model_name",
							"value": "squeezenet1_1"
						},
						{
							"key": "batch_size",
							"value": "3"
						},
						{
							"key": "initial_workers",
							"value": "3"
						},
						{
							"key": "response_timeout",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model with response_timeout as 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "766263f6-8b14-4b66-9ef8-e5780488c39d",
						"exec": [
							"pm.test(\"Successful POST message\", function () {",
							"    pm.expect(pm.response.code).to.be.eql(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar&model_name=squeezenet1_1&response_timeout=0",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar"
						},
						{
							"key": "model_name",
							"value": "squeezenet1_1"
						},
						{
							"key": "response_timeout",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8e672b7b-6699-4c83-bc10-13812ae2e450",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model with Batch Size",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "37a6253f-fbed-4eea-9c4e-be5401a1b227",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/resnet-152-batch.mar&model_name=resnet152&batch_size=2",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/resnet-152-batch.mar"
						},
						{
							"key": "model_name",
							"value": "resnet152"
						},
						{
							"key": "batch_size",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model Resnet152",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "08fc69c5-39c9-4d7c-8f72-0525eac87e3a",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet152",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet152"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model with Non integer Batch Size",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3c9db8b9-2244-4bc3-8251-2f94be4bb93b",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/resnet-152-batch.mar&model_name=resnet152&batch_size=dd&initial_workers=1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/resnet-152-batch.mar"
						},
						{
							"key": "model_name",
							"value": "resnet152"
						},
						{
							"key": "batch_size",
							"value": "dd"
						},
						{
							"key": "initial_workers",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model Resnet152",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5b5f5440-f2be-43e9-9549-49d1ac85e029",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet152",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet152"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model with integer Batch Size but non integer max batch delay parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "60b0c587-6ef6-4fba-82fc-d12395ee2ca3",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/resnet-152-batch.mar&model_name=resnet152&batch_size=2&initial_workers=1&max_batch_delay=junk",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/resnet-152-batch.mar"
						},
						{
							"key": "model_name",
							"value": "resnet152"
						},
						{
							"key": "batch_size",
							"value": "2"
						},
						{
							"key": "initial_workers",
							"value": "1"
						},
						{
							"key": "max_batch_delay",
							"value": "junk"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model Resnet152",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "89a166c4-0855-449e-9355-b22c7958ac57",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet152",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet152"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Squeezenet Model Negative initial workers",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "315bd109-2d42-422c-936e-14c38c21f3be",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar&model_name=squeezenet1_1&initial_workers=-1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar"
						},
						{
							"key": "model_name",
							"value": "squeezenet1_1"
						},
						{
							"key": "initial_workers",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ad27eae0-b0a9-487e-b5d9-885b4a5c2ba1",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Resnet Model Synchronous",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b68899a8-6971-4764-a4bf-c393b65c94fc",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/resnet-18.mar&model_name=resnet-18&synchronous=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/resnet-18.mar"
						},
						{
							"key": "model_name",
							"value": "resnet-18"
						},
						{
							"key": "synchronous",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model Resnet-18",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "941d35fc-81c0-43c2-827b-88ef8f2c6f4e",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model non boolean Synchronous value",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "032cc6e9-8850-41c1-bcd3-9f73ef8d81c9",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/resnet-18.mar&model_name=resnet-18&synchronous=-1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/resnet-18.mar"
						},
						{
							"key": "model_name",
							"value": "resnet-18"
						},
						{
							"key": "synchronous",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model Resnet-18",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "963d413f-3534-46c9-b4f5-9b16a261de5b",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Resnet Model Asynchronous",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "efc2b460-80b3-4adb-92e0-6bb6373b8f48",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/resnet-18.mar&model_name=resnet-18&synchronous=false",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/resnet-18.mar"
						},
						{
							"key": "model_name",
							"value": "resnet-18"
						},
						{
							"key": "synchronous",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List with Limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "930e0a7c-dd54-43f9-8279-b476e7331722",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?limit=1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "limit",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List with \"Negative\" Limit Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3f598154-3e2b-4add-a2d9-1265ff5a0841",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?limit=-1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "limit",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List with Pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d64659cc-a4dd-431f-83ad-df77b9979aa2",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?limit=1&next_page_token=1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "limit",
							"value": "1"
						},
						{
							"key": "next_page_token",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List with \"Negative\" Pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "49ead6d4-aa9e-4b75-adf6-9aac8e69d48b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?limit=1&next_page_token=-1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "limit",
							"value": "1"
						},
						{
							"key": "next_page_token",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update GPU Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a3a7f9b2-462c-472f-b393-b417870429d6",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?number_gpu=10",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "number_gpu",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update with \"Negative\" GPU Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "666890f2-e207-4056-8c98-d40bc23a6948",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?number_gpu=-1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "number_gpu",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale up Workers -  Synchronous",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9823f3b7-d070-4a61-9457-ea669547569a",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?min_worker=5&max_worker=5&synchronous=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "5"
						},
						{
							"key": "max_worker",
							"value": "5"
						},
						{
							"key": "synchronous",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale up Workers - Asynchronous",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7c1d4704-8ae9-4cc2-96b8-8175bb9c8d8f",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?min_worker=6&max_worker=6&synchronous=false",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "6"
						},
						{
							"key": "max_worker",
							"value": "6"
						},
						{
							"key": "synchronous",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Timeout to -1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6962dc64-aae7-4272-af2f-36db4293bc08",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?timeout=-1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "timeout",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Timeout to 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ef71ccb1-37c2-4c4b-a21d-3e5d461f228a",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?timeout=0",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "timeout",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model - Empty URL , Valid Model Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "492dc3f2-2ade-409e-946b-6b970f89b8ae",
						"exec": [
							"pm.test(",
							"    \"Invalid RegisterModel request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=&model_name=resnet-18",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": ""
						},
						{
							"key": "model_name",
							"value": "resnet-18"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model - Invalid URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b25b55f3-6206-4880-b3a2-3ec92fb051ea",
						"exec": [
							"pm.test(",
							"    \"Invalid RegisterModel request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/invalid-resnet-18.mar&model_name=invalid-resnet18",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/invalid-resnet-18.mar"
						},
						{
							"key": "model_name",
							"value": "invalid-resnet18"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List Model - Invalid Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d34298e7-b8f2-40be-ae71-42b231ae6702",
						"exec": [
							"pm.test(",
							"    \"Invalid ListModels request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/invalid_squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"invalid_squeezenet1_1"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Model - Valid model name, Invalid Model version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e2f202a9-fd39-4f46-86aa-5ce8c754e938",
						"exec": [
							"pm.test(",
							"    \"Invalid ListModels request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/0.0",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						"0.0"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Models - Invalid Next Page Token(Outside registered models range)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6d1eefeb-3c9c-4ee4-9edd-16fe9fd1a0be",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?next_page_token=12",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "next_page_token",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale Workers - Valid \"min_worker\" value, Invalid \"synchronous\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "86274516-fee3-41b0-98f3-1b48ff875a40",
						"exec": [
							"pm.test(\"Successful PUT message for scaling workers with unrecognized synchronous value\", function () {",
							"    pm.expect(pm.response.code).to.be.eql(202);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?min_worker=2&synchronous=Nan",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "2"
						},
						{
							"key": "synchronous",
							"value": "Nan"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale Workers - Invalid parameter values for both \"synchronous\" & \"min_worker\" params",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e6f1f62a-11a6-4fd1-9600-323787fe9fa4",
						"exec": [
							"pm.test(\"Successful PUT message\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?min_worker=nan&synchronous=nan",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "nan"
						},
						{
							"key": "synchronous",
							"value": "nan"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale down workers by Calling Update Workers API with no parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1e7c4095-0faf-4d9a-b7c2-77513f4bfa18",
						"exec": [
							"pm.test(\"Successful PUT message\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Worker for an invalid/non-existent model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "08b6822c-1230-4d54-addd-0c48558382c9",
						"exec": [
							"pm.test(",
							"    \"Invalid Scale Workers request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet181?min_worker=3",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet181"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Worker with Invalid Worker Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "93d4d51b-31de-4556-8e37-5f0bf91981d3",
						"exec": [
							"pm.test(",
							"    \"Invalid Scale Workers request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?min_worker=10&max_worker=9",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "10"
						},
						{
							"key": "max_worker",
							"value": "9"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Worker with Positive Worker Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0ccfb981-0b71-4c7b-8e76-2cd1cfec8b0c",
						"exec": [
							"pm.test(\"Valid SCALE request message\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?min_worker=4",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Worker with \"Zero\" Worker Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "61325043-1877-41b2-ab93-580363ce3622",
						"exec": [
							"pm.test(\"Valid SCALE request message\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?min_worker=0",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale worker by calling Update Worker API with negative min worker Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "be457b05-217d-4213-84e6-a3eee1de83e8",
						"exec": [
							"pm.test(",
							"    \"Invalid Scale Workers request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([500]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?min_worker=-1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "min_worker",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Scale worker by calling Update Worker API with negative max worker Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a06e2873-226b-4b92-900c-0748aa78dd17",
						"exec": [
							"pm.test(",
							"    \"Invalid Scale Workers request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18?max_worker=-1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					],
					"query": [
						{
							"key": "max_worker",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Version - Invalid Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d2b9a751-b645-4015-8c53-877ca20ac50b",
						"exec": [
							"pm.test(",
							"    \"Invalid Scale Workers request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/invalid_squeezenet1_1/1.0/set-default",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"invalid_squeezenet1_1",
						"1.0",
						"set-default"
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model Resnet-18",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0f18933c-5053-4514-b43b-59f49ff8b6bf",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/resnet-18",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"resnet-18"
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Valid Model name, but Invalid Model version",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "224c15d1-fe3f-4f05-9012-62bafaa5ee7b",
						"exec": [
							"pm.test(",
							"    \"Invalid UnRegisterModel request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/0.0",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						"0.0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "42b498ab-cc5c-4ad9-8e77-42012df98559",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar&model_name=squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar"
						},
						{
							"key": "model_name",
							"value": "squeezenet1_1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model with synchronous value as true",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "119cc931-2241-499a-abca-7f4452d580a8",
						"exec": [
							"pm.test(\"Successful DELETE request.\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/?synchronous=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						""
					],
					"query": [
						{
							"key": "synchronous",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "17812204-1ff8-45fd-871b-7c600575845c",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar&model_name=squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar"
						},
						{
							"key": "model_name",
							"value": "squeezenet1_1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model with synchronous value as non boolean",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d1cd1023-fc4a-4c98-b0aa-4af71e4a6ab9",
						"exec": [
							"pm.test(\"Successful DELETE request.\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/?synchronous=nan",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						""
					],
					"query": [
						{
							"key": "synchronous",
							"value": "nan"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ec6e7bda-ce1e-4d03-97f0-546aa5913758",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar&model_name=squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar"
						},
						{
							"key": "model_name",
							"value": "squeezenet1_1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model with non integer timeout value",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d0d6c90f-9c18-4a74-9879-a24f05f09bbd",
						"exec": [
							"pm.test(\"Successful DELETE request.\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/?timeout=true",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						""
					],
					"query": [
						{
							"key": "timeout",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "494776b4-4525-4bdc-bb7a-305c57d1ee05",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url=https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar&model_name=squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "https://torchserve.s3.amazonaws.com/mar_files/squeezenet1_1.mar"
						},
						{
							"key": "model_name",
							"value": "squeezenet1_1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Model with non boolean synchronous value & non integer timeout value",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8ec68983-d23e-4aba-a4f2-6852fca8e0fa",
						"exec": [
							"pm.test(\"Successful DELETE request.\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/squeezenet1_1/?timeout=true&synchronous=-1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"squeezenet1_1",
						""
					],
					"query": [
						{
							"key": "timeout",
							"value": "true"
						},
						{
							"key": "synchronous",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UnRegister Invalid Model Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0a77f3cf-720f-4bf4-974c-1d033635c2fc",
						"exec": [
							"pm.test(",
							"    \"Invalid UnRegisterModel request \\t\" +",
							"    \"Exception code : \" + pm.response.code + \"\\t\" +",
							"    \"Exception Type : \" +pm.response.json().type + \"\\t\" +",
							"    \"Exception Message: \" +pm.response.json().message + \"\\t\" ,",
							"    function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/invalid_squeezenet1_1",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"invalid_squeezenet1_1"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}
