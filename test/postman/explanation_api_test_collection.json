{
	"info": {
		"_postman_id": "81a4f41f-6aec-4820-b7cb-e10e921062eb",
		"name": "explanation_api_test_collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Model Zoo - Register Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "04370381-c1f5-45bb-bad0-400fb2ba8225",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models?url={{url}}&model_name={{model_name}}&initial_workers={{worker}}&synchronous={{synchronous}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models"
					],
					"query": [
						{
							"key": "url",
							"value": "{{url}}"
						},
						{
							"key": "model_name",
							"value": "{{model_name}}"
						},
						{
							"key": "initial_workers",
							"value": "{{worker}}"
						},
						{
							"key": "synchronous",
							"value": "{{synchronous}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Model Zoo - Explanations Model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "701971c0-d151-4b4f-a013-d24234e727bc",
						"exec": [
							"var type_response = pm.iterationData.get(\"content-type\");",
							"validators = {",
							"    image_classification: validate_image_classification,",
							"    default_json: validate_default",
							"};",
							"",
							"pm.test(\"Successful POST request\", function() {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"",
							"if (type_response === \"text/plain\") {",
							"    pm.test(\"Test expected TEXT response\", function() {",
							"        pm.response.to.have.body(pm.iterationData.get(\"expected_explain\"));",
							"    });",
							"",
							"} else if (type_response === \"application/json\") {",
							"    if (pm.iterationData.has(\"validator\")) {",
							"        var validator = pm.iterationData.get(\"validator\");       ",
							"    } else {",
							"        var  validator = \"default_json\";",
							"    }",
							"    pm.test(\"Test expected JSON response\", function() {",
							"        var actual_obj = pm.response.json();",
							"        var expected_obj = pm.iterationData.get(\"expected_explain\");",
							"        pm.expect(validators[validator](actual_obj, expected_obj)).to.be.true;",
							"    });",
							"",
							"}",
							"",
							"function validate_image_classification(actual_obj, expected_obj) {",
							"    if (_.size(expected_obj) != _.size(actual_obj)) {",
							"        return false;",
							"    }",
							"    return true;",
							"}",
							"",
							"/* Simple and nested json object can be compared using validate_default when key and value are constant.",
							"-Notes-",
							"The order of keys within an object may change.",
							"If the output is array of objects then the objects compared are positional and cannot change order.",
							"*/",
							"function validate_default(actual_obj, expected_obj) {",
							"    if (_.size(expected_obj) != _.size(actual_obj)) {",
							"        return false;",
							"    }",
							"    return true;",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "file",
					"file": {
						"src": "{{file}}"
					},
					"options": {
						"file": {}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{pred-port}}/explanations/{{model_name}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{pred-port}}",
					"path": [
						"explanations",
						"{{model_name}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Model Zoo - Unregister model",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d563c6f5-351d-4856-bb94-832f043cbceb",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{hostname}}:{{mgmt-port}}/models/{{model_name}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{hostname}}"
					],
					"port": "{{mgmt-port}}",
					"path": [
						"models",
						"{{model_name}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Model Zoo - Model Metrics",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0ebdb1a8-dce9-4c2e-81cf-116a30003ac8",
						"exec": [
							"pm.test(\"Successful GET request\", function () {",
							"    let pattern = new RegExp('ts_inference_latency_microseconds{uuid=\"[\\\\w]{8}(-[\\\\w]{4}){3}-[\\\\w]{12}\",model_name=\"'+pm.variables.get(\"model_name\"));",
							"    pm.expect(pm.response.text()).to.match(pattern);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8082/metrics",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8082",
					"path": [
						"metrics"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}